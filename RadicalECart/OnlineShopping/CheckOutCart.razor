@page "/OnlineShopping/CheckOutCart"
@inject IJSRuntime JSRuntime
@inject NavigationManager nav
@using Microsoft.AspNetCore.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@using Microsoft.Extensions.Configuration
@inject IConfiguration config
@using System.Text;
@inject IHttpClientFactory Http
@using System.Net;
@using Newtonsoft.Json
@using System.Net.Http;
@using System.Net.Http.Headers;
@using System.Text.RegularExpressions;
@using RadicalECart.Shared;
@using System.Net.Mail; @using System.IO;
@using System.Data;
@using System.Security.Cryptography;

<style>

    body {
        font-family: Arial;
        font-size: 17px;
        padding: 8px;
    }

    * {
        box-sizing: border-box;
    }

    .row {
        display: -ms-flexbox; /* IE10 */
        display: flex;
        -ms-flex-wrap: wrap; /* IE10 */
        flex-wrap: wrap;
        margin: 0 -16px;
    }

    .col-25 {
        -ms-flex: 25%; /* IE10 */
        flex: 25%;
    }

    .col-50 {
        -ms-flex: 50%; /* IE10 */
        flex: 50%;
    }

    .col-75 {
        -ms-flex: 75%; /* IE10 */
        flex: 75%;
    }

    .col-25,
    .col-50,
    .col-75 {
        padding: 0 16px;
    }

    .container {
        background-color: #f2f2f2;
        padding: 5px 20px 15px 20px;
        border: 1px solid lightgrey;
        border-radius: 3px;
    }

    input[type=text] {
        width: 100%;
        margin-bottom: 20px;
        padding: 12px;
        border: 1px solid #ccc;
        border-radius: 3px;
    }

    label {
        margin-bottom: 10px;
        display: block;
    }

    .icon-container {
        margin-bottom: 20px;
        padding: 7px 0;
        font-size: 24px;
    }

    .btn {
        background-color: #4CAF50;
        color: white;
        padding: 12px;
        margin: 10px 0;
        border: none;
        width: 100%;
        border-radius: 3px;
        cursor: pointer;
        font-size: 17px;
    }

        .btn:hover {
            background-color: #45a049;
        }

    a {
        color: #2196F3;
    }

    hr {
        border: 1px solid lightgrey;
    }

    span.price {
        float: right;
        color: grey;
    }

    /* Responsive layout - when the screen is less than 800px wide, make the two columns stack on top of each other instead of next to each other (also change the direction - make the "cart" column go on top) */
    @@media (max-width: 800px) {
        .row {
            flex-direction: column-reverse;
        }

        .col-25 {
            margin-bottom: 20px;
        }
    }
</style>

<SecondaryNavMenu></SecondaryNavMenu>
<br />

<div class="row">
    <div class="col-75">
        <div class="container">


            <div class="row">
                <div class="col-50">
                    <h3>Billing Address</h3>
                    <label for="fname"><i class="fa fa-user"></i> Full Name</label>
                    <input type="text" @bind-value="@billingDetails.Name" id="fnameBuss" name="firstname" placeholder="John M. Doe">
                    <label for="email"><i class="fa fa-envelope"></i> Email</label>
                    <input type="text" @bind-value="@billingDetails.Email" id="emailBuss" name="email" placeholder="john@example.com">
                    <label for="adr"><i class="fa fa-address-card-o"></i> Address</label>
                    <input type="text" @bind-value="@billingDetails.Address" id="adrBuss" name="address" placeholder="542 W. 15th Street">
                    <label for="city"><i class="fa fa-institution"></i> City</label>
                    <input type="text" @bind-value="@billingDetails.City" id="cityBuss" name="city" placeholder="New York">

                    <div class="row">
                        <div class="col-50">
                            <label for="state">State</label>
                            <input type="text" @bind-value="@billingDetails.State" id="stateBuss" name="state" placeholder="NY">
                        </div>
                        <div class="col-50">
                            <label for="zip">Zip</label>
                            <input type="text" @bind-value="@billingDetails.ZipCode" id="zipBuss" name="zip" placeholder="10001">
                        </div>
                    </div>
                </div>
                <div class="col-50" id="shippingaddress" style="display:none">
                    <h3>Shipping Address</h3>
                    <label for="fname"><i class="fa fa-user"></i> Full Name</label>
                    <input type="text" @bind-value="@shippingDetails.Name" id="fnameShip" name="firstname" placeholder="John M. Doe">
                    <label for="email"><i class="fa fa-envelope"></i> Email</label>
                    <input type="text" @bind-value="@shippingDetails.Email" id="emailShip" name="email" placeholder="john@example.com">
                    <label for="adr"><i class="fa fa-address-card-o"></i> Address</label>
                    <input type="text" @bind-value="@shippingDetails.Address" id="adrShip" name="address" placeholder="542 W. 15th Street">
                    <label for="city"><i class="fa fa-institution"></i> City</label>
                    <input type="text" @bind-value="@shippingDetails.City" id="cityShip" name="city" placeholder="New York">

                    <div class="row">
                        <div class="col-50">
                            <label for="state">State</label>
                            <input type="text" @bind-value="@shippingDetails.State" id="stateShip" name="state" placeholder="NY">
                        </div>
                        <div class="col-50">
                            <label for="zip">Zip</label>
                            <input type="text" @bind-value="@shippingDetails.ZipCode" id="zipShip" name="zip" placeholder="10001">
                        </div>
                    </div>
                </div>

                <div class="col-50">
                    <h3>Payment</h3>
                    <label for="fname">Accepted Cards</label>
                    <div class="icon-container">
                        <i class="fa fa-cc-visa" style="color:navy;"></i>
                        <i class="fa fa-cc-amex" style="color:blue;"></i>
                        <i class="fa fa-cc-mastercard" style="color:red;"></i>
                        <i class="fa fa-cc-discover" style="color:orange;"></i>
                    </div>
                    <label for="cname">Name on Card</label>
                    <input type="text" @bind-value="@cardDetails.Name" id="cname" name="cardname" placeholder="John More Doe">
                    <label for="ccnum">Credit card number</label>
                    <input type="text" @bind-value="@cardDetails.CardNumber" id="ccnum" name="cardnumber" placeholder="1111-2222-3333-4444">
                    <label for="expmonth">Exp Month</label>
                    <input type="text" @bind-value="@cardDetails.ExpMonth" id="expmonth" name="expmonth" placeholder="08">
                    <div class="row">
                        <div class="col-50">
                            <label for="expyear">Exp Year</label>
                            <input type="text" @bind-value="@cardDetails.ExpYear" id="expyear" name="expyear" placeholder="2018">
                        </div>
                        <div class="col-50">
                            <label for="cvv">CVV</label>
                            <input type="password" @bind-value="@cardDetails.Cvv" id="cvv" name="cvv" placeholder="352">
                        </div>
                    </div>
                </div>

            </div>
            <label>
                <input type="checkbox" checked="checked" id="shipaddr" name="sameadr" @onclick="ProcessShippingCheckBox"> Shipping address same as billing
            </label>
            <input type="submit" @onclick="ProceedCheckOut" value="Continue to checkout" class="btn">

        </div>
    </div>
    <div class="col-25">

        @if (details?.Count() > 0)
        {
            var sum = 0;
            <div class="container">
                <h4>Cart <span class="price" style="color:black"><i class="fa fa-shopping-cart"></i> <b>@details.Count()</b></span></h4>
                @*<p><a href="#">Product 1</a> <span class="price">$15</span></p>
                    <p><a href="#">Product 2</a> <span class="price">$5</span></p>
                    <p><a href="#">Product 3</a> <span class="price">$8</span></p>
                    <p><a href="#">Product 4</a> <span class="price">$2</span></p>*@
                @foreach (var item in details)
                {
                    var q = int.Parse(item.Chosen);
                    var q1 = int.Parse(item.Price);
                    var total = q * q1; sum += total;
                    <p><a href="#">@item.Name</a> <span class="price">₹@total</span>&nbsp;(@item.Chosen)</p>

                }
                <hr>
                <p>Total <span class="price" style="color:black"><b>₹@sum</b></span></p><br />
                <p>
                    Coupon code <span class="couponcode">
                        <input type="text" @bind-value="couponText" />
                        <button type="button" @onclick="ApplyCoupon">Redeem</button><span id="cancelcoupon" style="visibility:hidden">
                            <a href="#" @onclick:preventDefault @onclick="@CancelCoupon">Undo coupon changes</a>
                        </span>
                    </span>
                </p>
            </div>
        }
    </div>
</div>


@code {
    public string CouponName = "";
    public bool isCouponAdded = false;
    public async Task CancelCoupon()
    {
        ApiCall("GetCouponCodes", await ProtectedSessionStore.GetAsync<string>("UserEmail"));

        if (couponCodeList?.Count() > 0)
        {
            var filter = couponCodeList.Where(x => x.maxAllow != "0" && DateTime.Parse(x.CouponValidFrom) < DateTime.Now &&
            DateTime.Parse(x.CouponValidTo) > DateTime.Now).ToArray();
            if (filter?.Count() > 0)
                foreach (var item in filter)
                {
                    if (item.CouponName == couponText)
                    {
                        NewAmt = int.Parse(item.AmountOff);
                        break;
                    }
                }
        }
        StateHasChanged(); isCouponAdded = false;CouponName = "";
        await JSRuntime.InvokeVoidAsync("displayswal", "Success", "Coupon code cancelled successfully.");
        await JSRuntime.InvokeVoidAsync("ChangeVisibility", "cancelcoupon", "hidden");
    }
    public int NewAmt = 0;
    public CouponCode[] couponCodeList = null;
    public class CouponCode
    {
        public string CouponName { get; set; }
        public string CouponValidFrom { get; set; }
        public string CouponValidTo { get; set; }
        public string AmountOff { get; set; }
        public string maxAllow { get; set; }
        public string Assign { get; set; }
    }
    public async Task ApplyCoupon()
    {
        if (couponText == "")
            await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Please enter coupon code");
        else
        {
            ApiCall("GetCouponCodes", await ProtectedSessionStore.GetAsync<string>("UserEmail"));

            if (couponCodeList?.Count() > 0)
            {
                var filter = couponCodeList.Where(x => x.maxAllow != "0" && DateTime.Parse(x.CouponValidFrom) < DateTime.Now &&
                DateTime.Parse(x.CouponValidTo) > DateTime.Now).ToArray();
                if (filter?.Count() > 0)
                    foreach (var item in filter)
                    {
                        if (item.CouponName == couponText)
                        {
                            NewAmt = int.Parse(item.AmountOff);

                            await JSRuntime.InvokeVoidAsync("displayswal", "Success", "Coupon code applied successfully.");
                            break
                                     ;
                        }
                    }
                if (NewAmt ==0)
                {
                    await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid coupon code." +
                        " Please enter a valid coupon code");
                }
                else {
                    CouponName = couponText;
                    StateHasChanged(); isCouponAdded = true;
                    await JSRuntime.InvokeVoidAsync("ChangeVisibility", "cancelcoupon", "visible");
                }
            }
        }
    }
    public string couponText = "";
    public RadicalECart.Data.BillingCheckOutDetails billingDetails = new Data.BillingCheckOutDetails();
    public RadicalECart.Data.ShippingCheckOutDetails shippingDetails = new Data.ShippingCheckOutDetails();
    public RadicalECart.Data.CardDetails cardDetails = new Data.CardDetails();
    public async Task ProcessShippingCheckBox()
    {
        var res = await JSRuntime.InvokeAsync<bool>("isChecked");
        if (res)
        {
            await JSRuntime.InvokeVoidAsync("displaydiv", false);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("displaydiv", true);
        }
    }
    public bool isButtonClicked = false;
    public async Task ProceedCheckOut()
    {
        System.Text.RegularExpressions.Regex mailregex = new System.Text.RegularExpressions.Regex(@"\A(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\Z");
        System.Text.RegularExpressions.Regex numregex = new System.Text.RegularExpressions.Regex(@"[0-9]");
        System.Text.RegularExpressions.Regex cardregex = new System.Text.RegularExpressions.Regex(@"[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4}");
        if (await JSRuntime.InvokeAsync<bool>("isChecked"))
        {
            if (!string.IsNullOrEmpty(billingDetails.Email) && mailregex.IsMatch(billingDetails.Email))
            {
                if (!string.IsNullOrEmpty(billingDetails.Address))
                {
                    if (!string.IsNullOrEmpty(billingDetails.State))
                    {
                        if (!string.IsNullOrEmpty(billingDetails.City))
                        {
                            if (!string.IsNullOrEmpty(billingDetails.Name))
                            {
                                if (!string.IsNullOrEmpty(billingDetails.ZipCode) && billingDetails.ZipCode.Length == 5 && numregex.IsMatch(billingDetails.ZipCode))
                                {
                                    if (!string.IsNullOrEmpty(cardDetails.Cvv) && numregex.IsMatch(cardDetails.Cvv) && cardDetails.Cvv.Length == 3)
                                    {
                                        if (!string.IsNullOrEmpty(cardDetails.Name))
                                        {
                                            if (!string.IsNullOrEmpty(cardDetails.ExpMonth) && numregex.IsMatch(cardDetails.ExpMonth) && cardDetails.ExpMonth.Length == 2)
                                            {
                                                if (!string.IsNullOrEmpty(cardDetails.ExpYear) && numregex.IsMatch(cardDetails.ExpYear) && cardDetails.ExpYear.Length == 4)
                                                {
                                                    if (!string.IsNullOrEmpty(cardDetails.CardNumber) && cardregex.IsMatch(cardDetails.CardNumber))
                                                    {
                                                        ApiCall("GetCouponCodes", await ProtectedSessionStore.GetAsync<string>("UserEmail"));

                                                        if (couponCodeList?.Count() > 0)
                                                        {
                                                            var filter = couponCodeList.Where(x => x.maxAllow != "0" && DateTime.Parse(x.CouponValidFrom) < DateTime.Now &&
                                                            DateTime.Parse(x.CouponValidTo) > DateTime.Now).ToArray();
                                                            if (filter?.Count() > 0)
                                                                foreach (var item in filter)
                                                                {
                                                                    if (item.CouponName == couponText)
                                                                    {
                                                                        NewAmt = int.Parse(item.AmountOff);


                                                                    }
                                                                }
                                                        }
                                                        if (NewAmt > 0)
                                                        {
                                                            await ProtectedSessionStore.SetAsync("UsedCoupon", CouponName);
                                                            var _productName = await ProtectedSessionStore.GetAsync<string>("_productName");
                                                            var _totalChosenProducts = await ProtectedSessionStore.GetAsync<string>("_totalChosenProducts");
                                                            var _productPrice = await ProtectedSessionStore.GetAsync<string>("_productPrice");
                                                            var _productQty = await ProtectedSessionStore.GetAsync<string>("_productQty");
                                                            if (_productPrice.Contains("||"))
                                                            {
                                                                var splits = _productPrice.Split("||");
                                                                if (splits?.Count() > 0)
                                                                {
                                                                    var newstr = "";
                                                                    foreach (var item in splits)
                                                                    {
                                                                        var q = item;
                                                                        int q1 = int.Parse(q) - ((int.Parse(q) / 100) * NewAmt);
                                                                        newstr += q1.ToString() + "||";
                                                                    }
                                                                    newstr = newstr.Substring(0, newstr.Length - 2);
                                                                    await ProtectedSessionStore.SetAsync("_productPrice", newstr);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                var q= int.Parse(_productPrice) - ((int.Parse(_productPrice) / 100) * NewAmt);
                                                                await ProtectedSessionStore.SetAsync("_productPrice",   q.ToString());
                                                            }
                                                        }
                                                        await ProtectedSessionStore.SetAsync("isPaymentProcess", "true");
                                                        isButtonClicked = true;
                                                        await ProtectedSessionStore.SetAsync("billingaddress", billingDetails.Address+" "+billingDetails.City+" "+billingDetails.State+" "+billingDetails.ZipCode);
                                                        await ProtectedSessionStore.SetAsync("shippingaddress", billingDetails.Address + " " + billingDetails.City + " " + billingDetails.State + " " + billingDetails.ZipCode);
                                                        nav.NavigateTo("/OnlineShopping/PaymentProcessing");
                                                    }
                                                    else
                                                    {
                                                        await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid card number");
                                                    }
                                                }
                                                else
                                                {
                                                    await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid Expiry year");
                                                }
                                            }
                                            else
                                            {
                                                await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid Expiry month");
                                            }
                                        }
                                        else
                                        {
                                            await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid card member's name");
                                        }
                                    }
                                    else
                                    {
                                        await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid cvv number");
                                    }
                                }
                                else
                                {
                                    await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid Zip code");
                                }
                            }
                            else
                            {
                                await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid name");
                            }
                        }
                        else
                        {
                            await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid City");
                        }
                    }
                    else
                    {
                        await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid State");
                    }
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid address");
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid mail address");
            }
        }
        else
        {
            if (!string.IsNullOrEmpty(billingDetails.Email) && !string.IsNullOrEmpty(shippingDetails.Email)
                && mailregex.IsMatch(billingDetails.Email) && mailregex.IsMatch(shippingDetails.Email))
            {
                if (!string.IsNullOrEmpty(billingDetails.State) && !string.IsNullOrEmpty(shippingDetails.State)
                )
                {
                    if (!string.IsNullOrEmpty(billingDetails.City) && !string.IsNullOrEmpty(shippingDetails.City)
               )
                    {
                        if (!string.IsNullOrEmpty(billingDetails.Address) && !string.IsNullOrEmpty(shippingDetails.Address)
                )
                        {
                            if (!string.IsNullOrEmpty(billingDetails.Name) && !string.IsNullOrEmpty(shippingDetails.Name)
               )
                            {
                                if (!string.IsNullOrEmpty(billingDetails.ZipCode) && !string.IsNullOrEmpty(shippingDetails.ZipCode) &&
                                    billingDetails.ZipCode.Length == 5 && numregex.IsMatch(billingDetails.ZipCode)
                                    && mailregex.IsMatch(shippingDetails.Email) && shippingDetails.ZipCode.Length == 5)
                                {
                                    if (!string.IsNullOrEmpty(cardDetails.Cvv) && numregex.IsMatch(cardDetails.Cvv) && cardDetails.Cvv.Length == 3)
                                    {
                                        if (!string.IsNullOrEmpty(cardDetails.Name))
                                        {
                                            if (!string.IsNullOrEmpty(cardDetails.ExpMonth) && numregex.IsMatch(cardDetails.ExpMonth)
                                                && cardDetails.ExpMonth.Length == 2)
                                            {
                                                if (!string.IsNullOrEmpty(cardDetails.ExpYear) && numregex.IsMatch(cardDetails.ExpYear)
                                                    && cardDetails.ExpYear.Length == 4)
                                                {
                                                    if (!string.IsNullOrEmpty(cardDetails.CardNumber) && cardregex.IsMatch(cardDetails.CardNumber))
                                                    {
                                                        if (shippingDetails.City == billingDetails.City &&
                                                            shippingDetails.ZipCode == billingDetails.ZipCode &&
                                                            shippingDetails.Address == billingDetails.Address &&
                                                            shippingDetails.State == billingDetails.State)
                                                        {
                                                            await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Both billing and shipping details are same. Please tick the same address checkbox and proceed");
                                                        }
                                                        else
                                                        {
                                                            ApiCall("GetCouponCodes", await ProtectedSessionStore.GetAsync<string>("UserEmail"));

                                                            if (couponCodeList?.Count() > 0)
                                                            {
                                                                var filter = couponCodeList.Where(x => x.maxAllow != "0" && DateTime.Parse(x.CouponValidFrom) < DateTime.Now &&
                                                                DateTime.Parse(x.CouponValidTo) > DateTime.Now).ToArray();
                                                                if (filter?.Count() > 0)
                                                                    foreach (var item in filter)
                                                                    {
                                                                        if (item.CouponName == couponText)
                                                                        {
                                                                            NewAmt = int.Parse(item.AmountOff);


                                                                        }
                                                                    }
                                                            }
                                                            if (NewAmt > 0)
                                                            {
                                                                await ProtectedSessionStore.SetAsync("UsedCoupon", CouponName);
                                                                var _productName = await ProtectedSessionStore.GetAsync<string>("_productName");
                                                                var _totalChosenProducts = await ProtectedSessionStore.GetAsync<string>("_totalChosenProducts");
                                                                var _productPrice = await ProtectedSessionStore.GetAsync<string>("_productPrice");
                                                                var _productQty = await ProtectedSessionStore.GetAsync<string>("_productQty");
                                                                if (_productPrice.Contains("||"))
                                                                {
                                                                    var splits = _productPrice.Split("||");
                                                                    if (splits?.Count() > 0)
                                                                    {
                                                                        var newstr = "";
                                                                        foreach (var item in splits)
                                                                        {
                                                                            var q = item;
                                                                            int q1 = int.Parse(q) - ((int.Parse(q) / 100) * NewAmt);
                                                                            newstr += q1.ToString() + "||";
                                                                        }
                                                                        newstr = newstr.Substring(0, newstr.Length - 2);
                                                                        await ProtectedSessionStore.SetAsync("_productPrice", newstr);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    var q = int.Parse(_productPrice) - ((int.Parse(_productPrice) / 100) * NewAmt);
                                                                    await ProtectedSessionStore.SetAsync("_productPrice", q.ToString());
                                                                }
                                                            }
                                                            await ProtectedSessionStore.SetAsync("isPaymentProcess", "true");
                                                            isButtonClicked = true;
                                                            await ProtectedSessionStore.SetAsync("billingaddress", billingDetails.Address + " " + billingDetails.City + " " + billingDetails.State + " " + billingDetails.ZipCode);
                                                            await ProtectedSessionStore.SetAsync("shippingaddress", shippingDetails.Address + " " + shippingDetails.City + " " + shippingDetails.State + " " + shippingDetails.ZipCode);
                                                            nav.NavigateTo("/OnlineShopping/PaymentProcessing");

                                                        }

                                                    }
                                                    else
                                                    {
                                                        await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid card number");
                                                    }
                                                }
                                                else
                                                {
                                                    await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid Expiry year");
                                                }
                                            }
                                            else
                                            {
                                                await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid Expiry month");
                                            }
                                        }
                                        else
                                        {
                                            await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid card member's name");
                                        }
                                    }
                                    else
                                    {
                                        await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid cvv number");
                                    }
                                }
                                else
                                {
                                    await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid Zip code");
                                }
                            }
                            else
                            {
                                await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid name");
                            }
                        }
                        else
                        {
                            await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid City");
                        }
                    }
                    else
                    {
                        await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid State");
                    }
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid address");
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Invalid mail address");
            }
        }
    }
    public ProductDetails[] details { get; set; }
    public class ProductDetails
    {
        public string Name { get; set; }
        public string Price { get; set; }
        public string Description { get; set; }
        public string Hyperlink { get; set; }
        public string Chosen { get; set; }
        public byte[] Image { get; set; }
        public string Category { get; set; }
        public string Seller { get; set; }
        public string Warranty { get; set; }
        public string Quantity { get; set; }
    }

    public int RenderOnceMore = 0;
    private async Task sentMail(string guid, string eMail, ProductDetails[] details)
    {
        try
        {
            MailMessage mail = new MailMessage();
            SmtpClient SmtpServer = new SmtpClient("smtp.gmail.com");

            mail.From = new MailAddress("mailme.radicalecarts@gmail.com");
            mail.To.Add(eMail); mail.Priority = MailPriority.High;

            mail.Subject = "Failure transaction details - Radical ECart support team";
            string data = "";
            foreach (var item in details
                )
            {
                data += item.Name + " - " + item.Chosen + " - " + int.Parse(item.Price) * int.Parse(item.Chosen) + "<br/>";
            }
            mail.Body = "Please find below transaction details.<br/>" + "Transaction Id: " + guid + "<br/>" + data;
            SmtpServer.UseDefaultCredentials = false;
            SmtpServer.EnableSsl = true; SmtpServer.DeliveryMethod = SmtpDeliveryMethod.Network;
            SmtpServer.Credentials = new System.Net.NetworkCredential("mailme.radicalecarts@gmail.com", "qwerty123@Q");
            mail.IsBodyHtml = true; SmtpServer.Port = 587;
            SmtpServer.Send(mail);
            await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Failed transaction details have sent to your mail. " +
             "Please keep in touch with bank regarding refund. You may proceed now again for payment.");
            FailedTransactionComplete = true; await ProtectedSessionStore.SetAsync("isPaymentProcess", "");
            var val2= await ProtectedSessionStore.GetAsync<string>("UsedCoupon");bool isCoupon = false;
            int sum2 = 0;
            if(!string.IsNullOrEmpty(val2))
            {
                isCoupon = true;
                ApiCall("GetCouponCodes", await ProtectedSessionStore.GetAsync<string>("UserEmail"));
                if(couponCodeList?.Count()>0)
                {
                    var filter = couponCodeList.Where(x => x.maxAllow != "0" && DateTime.Parse(x.CouponValidFrom) < DateTime.Now &&
            DateTime.Parse(x.CouponValidTo) > DateTime.Now).ToArray();
                    if (filter?.Count() > 0)
                        foreach (var item in filter)
                        {
                            if (item.CouponName == val2)
                            {
                                NewAmt = int.Parse(item.AmountOff);
                                break;
                            }
                        }
                }
                details.ToList().ForEach(x =>
                {
                    int q2 =  int.Parse(x.Price) - ((int.Parse(x.Price)*NewAmt)/100);
                    q2 *= int.Parse(x.Chosen);
                    sum2 += q2;
                });
                NewAmt = 0;
            }
            ApiCall("SavePaymentTransaction", new TransactionDetails
            {
                Status = "Failure",
                Amount =isCoupon? sum2.ToString():  details.Sum(x => int.Parse(x.Price) * int.Parse(x.Chosen)).ToString(),
                EmailAddress = eMail,
                PaymentDate = DateTime.Now.ToString(),
                TransactionId = guid,
                Quantity = details.Select(x => x.Chosen).Aggregate((current, next) => current + "||" + next),
                ProductName = details.Select(x => x.Name).Aggregate((current, next) => current + "||" + next)
            });
            isCouponAdded = false;

        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("displayswal", "Error",
                         "There is some problem in sending failed transaction details. Please try " +
                         "again after sometime.");
        }
        await JSRuntime.InvokeVoidAsync("pointerevents", "auto");
    }
    public class TransactionDetails
    {
        public string TransactionId { get; set; }
        public string EmailAddress { get; set; }
        public string PaymentDate { get; set; }
        public string Amount { get; set; }
        public string Status { get; set; }
        public string ProductName { get; set; }
        public string Quantity { get; set; }
    }
    private object ApiCall(string method, object obj)
    {
        using (var client = new HttpClient())
        {

            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            var myContent = JsonConvert.SerializeObject(obj);

            var httpContent = new StringContent(myContent, Encoding.UTF8, "application/json");

            var response = client.PostAsync(config.GetValue<string>("ApiUrl") + method, httpContent).Result;
            if (response.StatusCode == HttpStatusCode.OK)
            {
                var result = response.Content.ReadAsStringAsync().Result;
                if (method == "GetCouponCodes")
                {
                    couponCodeList = JsonConvert.DeserializeObject<CouponCode[]>(result);
                }
                else if (result.Contains("true"))
                {

                    return true;
                }
            }
        }
        return false;
    }
    private string Encrypt(string clearText)
    {
        string EncryptionKey = "MAKV2SPBNI99212";
        byte[] clearBytes = Encoding.Unicode.GetBytes(clearText);
        using (Aes encryptor = Aes.Create())
        {
            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 });
            encryptor.Key = pdb.GetBytes(32);
            encryptor.IV = pdb.GetBytes(16);
            using (MemoryStream ms = new MemoryStream())
            {
                using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateEncryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(clearBytes, 0, clearBytes.Length);
                    cs.Close();
                }
                clearText = Convert.ToBase64String(ms.ToArray());
            }
        }
        return clearText;
    }
    public bool FailedTransactionComplete = false;
    private string Decrypt(string cipherText)
    {
        string EncryptionKey = "MAKV2SPBNI99212";
        byte[] cipherBytes = Convert.FromBase64String(cipherText);
        using (Aes encryptor = Aes.Create())
        {
            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 });
            encryptor.Key = pdb.GetBytes(32);
            encryptor.IV = pdb.GetBytes(16);
            using (MemoryStream ms = new MemoryStream())
            {
                using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateDecryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(cipherBytes, 0, cipherBytes.Length);
                    cs.Close();
                }
                cipherText = Encoding.Unicode.GetString(ms.ToArray());
            }
        }
        return cipherText;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("pointerevents", "auto");
        var paymentProcess = await ProtectedSessionStore.GetAsync<string>("isPaymentProcess");
        var avoidDoingProcess = await ProtectedSessionStore.GetAsync<string>("avoidDoingProcess");
        if (!string.IsNullOrEmpty(paymentProcess) && paymentProcess=="done")
        {
            await JSRuntime.InvokeVoidAsync("displayswal", "Success", "Payment gateway success");
            nav.NavigateTo("/OnlineShopping/OrderCompletion");
        }
        else if(!string.IsNullOrEmpty(avoidDoingProcess))
        {
            await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Previous cart has been shopped away. Please fill the new cart");
            nav.NavigateTo("/OnlineShopping/Default");
        }
        else if (!string.IsNullOrEmpty(paymentProcess) && !isButtonClicked && !FailedTransactionComplete)
        {
            await JSRuntime.InvokeVoidAsync("pointerevents", "none");
            string guid = Guid.NewGuid().ToString();
            await ProtectedSessionStore.SetAsync("FailedTransaction", guid);
            await JSRuntime.InvokeVoidAsync("displayswal", "Error", "Payment failed. Please avoid clicking browser's back button when doing transaction." +
                " Please try again");
            var email = await ProtectedSessionStore.GetAsync<string>("UserEmail");
            if (string.IsNullOrEmpty(email))
            {
                email = await JSRuntime.InvokeAsync<string>("getCookie", Encrypt("UserName"));
                email = Decrypt(email);
            }
            var _productName = await ProtectedSessionStore.GetAsync<string>("_productName");
            var _totalChosenProducts = await ProtectedSessionStore.GetAsync<string>("_totalChosenProducts");
            var _productPrice = await ProtectedSessionStore.GetAsync<string>("_productPrice");
            if (!string.IsNullOrEmpty(_productName) && !string.IsNullOrEmpty(_totalChosenProducts)
              && !string.IsNullOrEmpty(_productPrice))
            {
                var det = new List<ProductDetails>();
                if (_productName.Contains("||"))
                {
                    var productnames = _productName.Split("||");
                    var productprice = _productPrice.Split("||");
                    var totalproducts = _totalChosenProducts.Split("||");
                    for (int i = 0; i < productnames.Length; i++)
                    {
                        if (!det.Any(x => x.Name == productnames[i]))
                            det.Add(new ProductDetails { Price = productprice[i], Name = productnames[i], Chosen = totalproducts[i] });
                        else
                        {
                            var detail1 = det.Where(x => x.Name == productnames[i]).FirstOrDefault();
                            det.Remove(detail1);
                            var q = detail1.Chosen;
                            det.Add(new ProductDetails { Price = productprice[i], Name = productnames[i], Chosen = (int.Parse(q) + 1).ToString() });
                        }
                    }

                }
                else
                    det.Add(new ProductDetails
                    {
                        Chosen = _totalChosenProducts,
                        Price = _productPrice,
                        Name = _productName
                    });
                if (det?.Count > 0)
                    await sentMail(guid, email, det.ToArray());
                nav.NavigateTo("/OnlineShopping/FailedTransaction");
            }


        }
        var userId = await ProtectedSessionStore.GetAsync<string>("UserId");
        if (!string.IsNullOrEmpty(userId))
        {
            var _productName = await ProtectedSessionStore.GetAsync<string>("_productName");
            var _totalChosenProducts = await ProtectedSessionStore.GetAsync<string>("_totalChosenProducts");
            var _productPrice = await ProtectedSessionStore.GetAsync<string>("_productPrice");
            if (!string.IsNullOrEmpty(_productName) && !string.IsNullOrEmpty(_totalChosenProducts)
              && !string.IsNullOrEmpty(_productPrice))
            {
                var response = new List<ProductDetails>();
                if (_productName.Contains("||"))
                {
                    var productnames = _productName.Split("||");
                    var productprice = _productPrice.Split("||");
                    var totalproducts = _totalChosenProducts.Split("||");
                    for (int i = 0; i < productnames.Length; i++)
                    {
                        if (!response.Any(x => x.Name == productnames[i]))
                            response.Add(new ProductDetails { Price = productprice[i], Name = productnames[i], Chosen = totalproducts[i] });
                        else
                        {
                            var detail1 = response.Where(x => x.Name == productnames[i]).FirstOrDefault();
                            response.Remove(detail1);
                            var q = detail1.Chosen;
                            response.Add(new ProductDetails { Price = productprice[i], Name = productnames[i], Chosen = (int.Parse(q) + 1).ToString() });
                        }
                    }
                    details = response.ToArray();
                }
                else
                {
                    response.Add(new ProductDetails
                    {
                        Chosen = _totalChosenProducts,
                        Price = _productPrice,
                        Name = _productName
                    });
                    details = response.ToArray();
                }
                if (NewAmt > 0)
                {
                    var details1 = new List<ProductDetails>();
                    foreach (var item in details)
                    {
                        var q = 0;
                        if (isCouponAdded)
                            q = int.Parse(item.Price) - ((int.Parse(item.Price) / 100) * NewAmt);
                        else
                        {
                            q = int.Parse(item.Price) - ((int.Parse(item.Price) / 100) * NewAmt);
                            q = (100 * int.Parse(q.ToString())) / (100 - NewAmt);
                        }
                        item.Price = q.ToString();
                        details1.Add(item);
                    }
                    details = details1.ToArray();
                    StateHasChanged();
                }
                if (RenderOnceMore == 0)
                    StateHasChanged(); RenderOnceMore += 1;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("displayswal", "Error", "You have not " +
                   "added any products to cart. Please add items to proceed");
                nav.NavigateTo("/OnlineShopping/Default");
            }

        }
        else
        {
            await JSRuntime.InvokeVoidAsync("displayswal", "Error", "You are not " +
                "authorized to view this page. Please login to access the page");
            nav.NavigateTo("/Users/Login");
        }
        await JSRuntime.InvokeVoidAsync("setTitle", "Cart Checkout!");
    }

}
