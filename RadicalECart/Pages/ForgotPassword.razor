@page "/ForgotPassword"
@inject IJSRuntime JSRuntime
@inject NavigationManager nav
@inject IHttpClientFactory Http
@using RadicalECart.Data;
@using System.Net;
@using System.Net.Http;
@using System.Net.Http.Headers;
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Configuration
@using Newtonsoft.Json
@inject IConfiguration config
@using System.Text
@using System.Net.Mail;
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore

<style>
    body {
        background-color: white;
    }
</style>

<div style="text-align:center">
    <div class="box">
        <form class="login-form">
            <h1>Reset password</h1>
            <EditForm OnValidSubmit="@HandleValidSubmit" Model="@user">
                <InputText type="text" @bind-Value="@user.Email" placeholder="Email address" />
                &nbsp;<button type="button" @onclick="(()=>SendMail(user.Email))">Send OTP</button>

                @*<ValidationMessage For="@(()=>user.UserName)"></ValidationMessage>*@
                <InputText type="text" placeholder="Enter OTP"
                           @bind-Value="@user.otp" />
                <InputText type="password" placeholder="Password" @bind-Value="@user.Password" />

                <InputText type="password" placeholder="Confirm password" @bind-Value="@user.ConfirmPassword" />
                @*<ValidationMessage For="@(() => user.Password)"></ValidationMessage>*@
                <button type="submit" class="loginbtn">Reset Password</button>


                <div class="links">
                    <a href="#" @onclick="GoLogin">Login</a>
                    <a href="#" @onclick="GoRegister">Register</a>
                </div>
                <div id="formsummary" style="color:red">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                </div>
            </EditForm>
        </form>

    </div>

</div>

@code {
    private ResetPasswordModel user = new ResetPasswordModel();
    public async void HandleValidSubmit()
    {
        //var user1 = (object)user;

        string userId = ApiCall("CheckUserEmailAddress", user.Email);
        if (!string.IsNullOrEmpty(userId))
        {
            userId = userId.Replace("\\", "").Replace("\"", "");
            var OtpObj= await ProtectedSessionStore.GetAsync<string>("OTPsession");
            if (OtpObj==(user.otp ))
            {
                user.UserId = userId;
                var user1 = (object)user;
                string ans = ApiCall("UpdatePassword", user1);
                bool.TryParse(ans, out bool ans1);
                if (ans1)
                {
                    await JSRuntime.InvokeVoidAsync("displayswal", "Success",
                             "your password has been changed successfully.");
                    nav.NavigateTo("/Users/Login");
                }
                else
                    await JSRuntime.InvokeVoidAsync("displayswal", "Error",
                            "There is some problem in updating your password." +
                            "Please try again after soem time.");
            }
            else
                await JSRuntime.InvokeVoidAsync("displayswal", "Error",
                             "Mismatch in OTP. Please enter correct OTP.");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("displayswal", "Error",
                          "User not found");

        }
    }
    public async void SendMail(string eMail)
    {
        //mailme_radicalecarts@rediffmail.com
        try
        {
            Regex r = new Regex(@"\A(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\Z");
            Match match = r.Match(eMail);
            if (match.Success)
            {
                Random r1 = new Random();
                string otp = r1.Next(10000, 99999).ToString();
                await ProtectedSessionStore.SetAsync("OTPsession", otp);
                MailMessage mail = new MailMessage();
                SmtpClient SmtpServer = new SmtpClient("smtp.gmail.com");

                mail.From = new MailAddress("mailme.radicalecarts@gmail.com");
                mail.To.Add(eMail);
                mail.Subject = "Password reset mail - Radical ECart support team";
                mail.Body = "Please use below OTP to change your password. " + otp;
                SmtpServer.UseDefaultCredentials = false;
                SmtpServer.Port = 587; SmtpServer.EnableSsl = true;
                SmtpServer.Credentials = new System.Net.NetworkCredential("mailme.radicalecarts@gmail.com", "qwerty123@Q");
                SmtpServer.DeliveryMethod = SmtpDeliveryMethod.Network;

                SmtpServer.Send(mail);
                await JSRuntime.InvokeVoidAsync("displayswal", "Success",
                    "Your OTP has been sent to your mail. Please use that OTP to change" +
                    " your password.");
                //ProtectedSessionStore.SetAsync("count", _currentCount);
            }
            else
                await JSRuntime.InvokeVoidAsync("displayswal", "Error",
                     "Invalid mail address.");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("displayswal", "Error",
                         "There is some problem in sending OTP. Please try " +
                         "again after sometime.");
        }
    }
    private string ApiCall(string methodname, object user)
    {
        string ans = "";
        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            var myContent = JsonConvert.SerializeObject(user);

            var httpContent = new StringContent(myContent, Encoding.UTF8, "application/json");

            var response = httpClient.PostAsync(config.GetValue<string>
    ("ApiUrl") + methodname, httpContent).Result;

            if (response.StatusCode == HttpStatusCode.OK)
            {
                ans = response.Content.ReadAsStringAsync().Result;
            }
            else
            {
                ans = "Some error occured." + response.StatusCode;
            }
            return ans;
        }
    }
    public void GoLogin()
    {
        nav.NavigateTo("/Users/Login");
    }
    public void GoRegister()
    {
        nav.NavigateTo("/Users/Register");
    }
}
