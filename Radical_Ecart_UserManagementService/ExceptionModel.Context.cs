//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Radical_Ecart_UserManagementService
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ExceptionDatabaseEntities : DbContext
    {
        public ExceptionDatabaseEntities()
            : base("name=ExceptionDatabaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<exception> exceptions { get; set; }
    
        public virtual int ExceptionLog(string exmessage, string filename, Nullable<System.DateTime> createddatetime, Nullable<int> lineno, string inner, string methodname, string id)
        {
            var exmessageParameter = exmessage != null ?
                new ObjectParameter("exmessage", exmessage) :
                new ObjectParameter("exmessage", typeof(string));
    
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var createddatetimeParameter = createddatetime.HasValue ?
                new ObjectParameter("createddatetime", createddatetime) :
                new ObjectParameter("createddatetime", typeof(System.DateTime));
    
            var linenoParameter = lineno.HasValue ?
                new ObjectParameter("lineno", lineno) :
                new ObjectParameter("lineno", typeof(int));
    
            var innerParameter = inner != null ?
                new ObjectParameter("inner", inner) :
                new ObjectParameter("inner", typeof(string));
    
            var methodnameParameter = methodname != null ?
                new ObjectParameter("methodname", methodname) :
                new ObjectParameter("methodname", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExceptionLog", exmessageParameter, filenameParameter, createddatetimeParameter, linenoParameter, innerParameter, methodnameParameter, idParameter);
        }
    }
}
